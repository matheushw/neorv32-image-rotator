--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=14 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:24:SJ cbx_lpm_add_sub 2020:06:05:12:04:24:SJ cbx_lpm_compare 2020:06:05:12:04:24:SJ cbx_lpm_decode 2020:06:05:12:04:24:SJ cbx_mgl 2020:06:05:13:25:21:SJ cbx_nadder 2020:06:05:12:04:24:SJ cbx_stratix 2020:06:05:12:04:24:SJ cbx_stratixii 2020:06:05:12:04:24:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_9ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[13..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[13..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1008w[3..0]	: WIRE;
	w_anode1018w[3..0]	: WIRE;
	w_anode1028w[3..0]	: WIRE;
	w_anode1038w[3..0]	: WIRE;
	w_anode1048w[3..0]	: WIRE;
	w_anode1058w[3..0]	: WIRE;
	w_anode1070w[1..0]	: WIRE;
	w_anode1077w[3..0]	: WIRE;
	w_anode1088w[3..0]	: WIRE;
	w_anode1098w[3..0]	: WIRE;
	w_anode1108w[3..0]	: WIRE;
	w_anode1118w[3..0]	: WIRE;
	w_anode1128w[3..0]	: WIRE;
	w_anode1138w[3..0]	: WIRE;
	w_anode1148w[3..0]	: WIRE;
	w_anode972w[1..0]	: WIRE;
	w_anode981w[3..0]	: WIRE;
	w_anode998w[3..0]	: WIRE;
	w_data970w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[13..0] = eq_wire[13..0];
	eq_wire[] = ( ( w_anode1148w[3..3], w_anode1138w[3..3], w_anode1128w[3..3], w_anode1118w[3..3], w_anode1108w[3..3], w_anode1098w[3..3], w_anode1088w[3..3], w_anode1077w[3..3]), ( w_anode1058w[3..3], w_anode1048w[3..3], w_anode1038w[3..3], w_anode1028w[3..3], w_anode1018w[3..3], w_anode1008w[3..3], w_anode998w[3..3], w_anode981w[3..3]));
	w_anode1008w[] = ( (w_anode1008w[2..2] & (! w_data970w[2..2])), (w_anode1008w[1..1] & w_data970w[1..1]), (w_anode1008w[0..0] & (! w_data970w[0..0])), w_anode972w[1..1]);
	w_anode1018w[] = ( (w_anode1018w[2..2] & (! w_data970w[2..2])), (w_anode1018w[1..1] & w_data970w[1..1]), (w_anode1018w[0..0] & w_data970w[0..0]), w_anode972w[1..1]);
	w_anode1028w[] = ( (w_anode1028w[2..2] & w_data970w[2..2]), (w_anode1028w[1..1] & (! w_data970w[1..1])), (w_anode1028w[0..0] & (! w_data970w[0..0])), w_anode972w[1..1]);
	w_anode1038w[] = ( (w_anode1038w[2..2] & w_data970w[2..2]), (w_anode1038w[1..1] & (! w_data970w[1..1])), (w_anode1038w[0..0] & w_data970w[0..0]), w_anode972w[1..1]);
	w_anode1048w[] = ( (w_anode1048w[2..2] & w_data970w[2..2]), (w_anode1048w[1..1] & w_data970w[1..1]), (w_anode1048w[0..0] & (! w_data970w[0..0])), w_anode972w[1..1]);
	w_anode1058w[] = ( (w_anode1058w[2..2] & w_data970w[2..2]), (w_anode1058w[1..1] & w_data970w[1..1]), (w_anode1058w[0..0] & w_data970w[0..0]), w_anode972w[1..1]);
	w_anode1070w[] = ( (w_anode1070w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1077w[] = ( (w_anode1077w[2..2] & (! w_data970w[2..2])), (w_anode1077w[1..1] & (! w_data970w[1..1])), (w_anode1077w[0..0] & (! w_data970w[0..0])), w_anode1070w[1..1]);
	w_anode1088w[] = ( (w_anode1088w[2..2] & (! w_data970w[2..2])), (w_anode1088w[1..1] & (! w_data970w[1..1])), (w_anode1088w[0..0] & w_data970w[0..0]), w_anode1070w[1..1]);
	w_anode1098w[] = ( (w_anode1098w[2..2] & (! w_data970w[2..2])), (w_anode1098w[1..1] & w_data970w[1..1]), (w_anode1098w[0..0] & (! w_data970w[0..0])), w_anode1070w[1..1]);
	w_anode1108w[] = ( (w_anode1108w[2..2] & (! w_data970w[2..2])), (w_anode1108w[1..1] & w_data970w[1..1]), (w_anode1108w[0..0] & w_data970w[0..0]), w_anode1070w[1..1]);
	w_anode1118w[] = ( (w_anode1118w[2..2] & w_data970w[2..2]), (w_anode1118w[1..1] & (! w_data970w[1..1])), (w_anode1118w[0..0] & (! w_data970w[0..0])), w_anode1070w[1..1]);
	w_anode1128w[] = ( (w_anode1128w[2..2] & w_data970w[2..2]), (w_anode1128w[1..1] & (! w_data970w[1..1])), (w_anode1128w[0..0] & w_data970w[0..0]), w_anode1070w[1..1]);
	w_anode1138w[] = ( (w_anode1138w[2..2] & w_data970w[2..2]), (w_anode1138w[1..1] & w_data970w[1..1]), (w_anode1138w[0..0] & (! w_data970w[0..0])), w_anode1070w[1..1]);
	w_anode1148w[] = ( (w_anode1148w[2..2] & w_data970w[2..2]), (w_anode1148w[1..1] & w_data970w[1..1]), (w_anode1148w[0..0] & w_data970w[0..0]), w_anode1070w[1..1]);
	w_anode972w[] = ( (w_anode972w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode981w[] = ( (w_anode981w[2..2] & (! w_data970w[2..2])), (w_anode981w[1..1] & (! w_data970w[1..1])), (w_anode981w[0..0] & (! w_data970w[0..0])), w_anode972w[1..1]);
	w_anode998w[] = ( (w_anode998w[2..2] & (! w_data970w[2..2])), (w_anode998w[1..1] & (! w_data970w[1..1])), (w_anode998w[0..0] & w_data970w[0..0]), w_anode972w[1..1]);
	w_data970w[2..0] = data_wire[2..0];
END;
--VALID FILE
