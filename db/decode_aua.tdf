--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=15 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:24:SJ cbx_lpm_add_sub 2020:06:05:12:04:24:SJ cbx_lpm_compare 2020:06:05:12:04:24:SJ cbx_lpm_decode 2020:06:05:12:04:24:SJ cbx_mgl 2020:06:05:13:25:21:SJ cbx_nadder 2020:06:05:12:04:24:SJ cbx_stratix 2020:06:05:12:04:24:SJ cbx_stratixii 2020:06:05:12:04:24:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_aua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[14..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[14..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1040w[1..0]	: WIRE;
	w_anode1049w[3..0]	: WIRE;
	w_anode1066w[3..0]	: WIRE;
	w_anode1076w[3..0]	: WIRE;
	w_anode1086w[3..0]	: WIRE;
	w_anode1096w[3..0]	: WIRE;
	w_anode1106w[3..0]	: WIRE;
	w_anode1116w[3..0]	: WIRE;
	w_anode1126w[3..0]	: WIRE;
	w_anode1138w[1..0]	: WIRE;
	w_anode1145w[3..0]	: WIRE;
	w_anode1156w[3..0]	: WIRE;
	w_anode1166w[3..0]	: WIRE;
	w_anode1176w[3..0]	: WIRE;
	w_anode1186w[3..0]	: WIRE;
	w_anode1196w[3..0]	: WIRE;
	w_anode1206w[3..0]	: WIRE;
	w_anode1216w[3..0]	: WIRE;
	w_data1038w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[14..0] = eq_wire[14..0];
	eq_wire[] = ( ( w_anode1216w[3..3], w_anode1206w[3..3], w_anode1196w[3..3], w_anode1186w[3..3], w_anode1176w[3..3], w_anode1166w[3..3], w_anode1156w[3..3], w_anode1145w[3..3]), ( w_anode1126w[3..3], w_anode1116w[3..3], w_anode1106w[3..3], w_anode1096w[3..3], w_anode1086w[3..3], w_anode1076w[3..3], w_anode1066w[3..3], w_anode1049w[3..3]));
	w_anode1040w[] = ( (w_anode1040w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode1049w[] = ( (w_anode1049w[2..2] & (! w_data1038w[2..2])), (w_anode1049w[1..1] & (! w_data1038w[1..1])), (w_anode1049w[0..0] & (! w_data1038w[0..0])), w_anode1040w[1..1]);
	w_anode1066w[] = ( (w_anode1066w[2..2] & (! w_data1038w[2..2])), (w_anode1066w[1..1] & (! w_data1038w[1..1])), (w_anode1066w[0..0] & w_data1038w[0..0]), w_anode1040w[1..1]);
	w_anode1076w[] = ( (w_anode1076w[2..2] & (! w_data1038w[2..2])), (w_anode1076w[1..1] & w_data1038w[1..1]), (w_anode1076w[0..0] & (! w_data1038w[0..0])), w_anode1040w[1..1]);
	w_anode1086w[] = ( (w_anode1086w[2..2] & (! w_data1038w[2..2])), (w_anode1086w[1..1] & w_data1038w[1..1]), (w_anode1086w[0..0] & w_data1038w[0..0]), w_anode1040w[1..1]);
	w_anode1096w[] = ( (w_anode1096w[2..2] & w_data1038w[2..2]), (w_anode1096w[1..1] & (! w_data1038w[1..1])), (w_anode1096w[0..0] & (! w_data1038w[0..0])), w_anode1040w[1..1]);
	w_anode1106w[] = ( (w_anode1106w[2..2] & w_data1038w[2..2]), (w_anode1106w[1..1] & (! w_data1038w[1..1])), (w_anode1106w[0..0] & w_data1038w[0..0]), w_anode1040w[1..1]);
	w_anode1116w[] = ( (w_anode1116w[2..2] & w_data1038w[2..2]), (w_anode1116w[1..1] & w_data1038w[1..1]), (w_anode1116w[0..0] & (! w_data1038w[0..0])), w_anode1040w[1..1]);
	w_anode1126w[] = ( (w_anode1126w[2..2] & w_data1038w[2..2]), (w_anode1126w[1..1] & w_data1038w[1..1]), (w_anode1126w[0..0] & w_data1038w[0..0]), w_anode1040w[1..1]);
	w_anode1138w[] = ( (w_anode1138w[0..0] & data_wire[3..3]), enable_wire);
	w_anode1145w[] = ( (w_anode1145w[2..2] & (! w_data1038w[2..2])), (w_anode1145w[1..1] & (! w_data1038w[1..1])), (w_anode1145w[0..0] & (! w_data1038w[0..0])), w_anode1138w[1..1]);
	w_anode1156w[] = ( (w_anode1156w[2..2] & (! w_data1038w[2..2])), (w_anode1156w[1..1] & (! w_data1038w[1..1])), (w_anode1156w[0..0] & w_data1038w[0..0]), w_anode1138w[1..1]);
	w_anode1166w[] = ( (w_anode1166w[2..2] & (! w_data1038w[2..2])), (w_anode1166w[1..1] & w_data1038w[1..1]), (w_anode1166w[0..0] & (! w_data1038w[0..0])), w_anode1138w[1..1]);
	w_anode1176w[] = ( (w_anode1176w[2..2] & (! w_data1038w[2..2])), (w_anode1176w[1..1] & w_data1038w[1..1]), (w_anode1176w[0..0] & w_data1038w[0..0]), w_anode1138w[1..1]);
	w_anode1186w[] = ( (w_anode1186w[2..2] & w_data1038w[2..2]), (w_anode1186w[1..1] & (! w_data1038w[1..1])), (w_anode1186w[0..0] & (! w_data1038w[0..0])), w_anode1138w[1..1]);
	w_anode1196w[] = ( (w_anode1196w[2..2] & w_data1038w[2..2]), (w_anode1196w[1..1] & (! w_data1038w[1..1])), (w_anode1196w[0..0] & w_data1038w[0..0]), w_anode1138w[1..1]);
	w_anode1206w[] = ( (w_anode1206w[2..2] & w_data1038w[2..2]), (w_anode1206w[1..1] & w_data1038w[1..1]), (w_anode1206w[0..0] & (! w_data1038w[0..0])), w_anode1138w[1..1]);
	w_anode1216w[] = ( (w_anode1216w[2..2] & w_data1038w[2..2]), (w_anode1216w[1..1] & w_data1038w[1..1]), (w_anode1216w[0..0] & w_data1038w[0..0]), w_anode1138w[1..1]);
	w_data1038w[2..0] = data_wire[2..0];
END;
--VALID FILE
