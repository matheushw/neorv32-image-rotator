--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=12 LPM_WIDTH=4 data enable eq
--VERSION_BEGIN 20.1 cbx_cycloneii 2020:06:05:12:04:24:SJ cbx_lpm_add_sub 2020:06:05:12:04:24:SJ cbx_lpm_compare 2020:06:05:12:04:24:SJ cbx_lpm_decode 2020:06:05:12:04:24:SJ cbx_mgl 2020:06:05:13:25:21:SJ cbx_nadder 2020:06:05:12:04:24:SJ cbx_stratix 2020:06:05:12:04:24:SJ cbx_stratixii 2020:06:05:12:04:24:SJ  VERSION_END


-- Copyright (C) 2020  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.



--synthesis_resources = lut 18 
SUBDESIGN decode_7ua
( 
	data[3..0]	:	input;
	enable	:	input;
	eq[11..0]	:	output;
) 
VARIABLE 
	data_wire[3..0]	: WIRE;
	enable_wire	: WIRE;
	eq_node[11..0]	: WIRE;
	eq_wire[15..0]	: WIRE;
	w_anode1000w[3..0]	: WIRE;
	w_anode1010w[3..0]	: WIRE;
	w_anode834w[1..0]	: WIRE;
	w_anode843w[3..0]	: WIRE;
	w_anode860w[3..0]	: WIRE;
	w_anode870w[3..0]	: WIRE;
	w_anode880w[3..0]	: WIRE;
	w_anode890w[3..0]	: WIRE;
	w_anode900w[3..0]	: WIRE;
	w_anode910w[3..0]	: WIRE;
	w_anode920w[3..0]	: WIRE;
	w_anode932w[1..0]	: WIRE;
	w_anode939w[3..0]	: WIRE;
	w_anode950w[3..0]	: WIRE;
	w_anode960w[3..0]	: WIRE;
	w_anode970w[3..0]	: WIRE;
	w_anode980w[3..0]	: WIRE;
	w_anode990w[3..0]	: WIRE;
	w_data832w[2..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	enable_wire = enable;
	eq[] = eq_node[];
	eq_node[11..0] = eq_wire[11..0];
	eq_wire[] = ( ( w_anode1010w[3..3], w_anode1000w[3..3], w_anode990w[3..3], w_anode980w[3..3], w_anode970w[3..3], w_anode960w[3..3], w_anode950w[3..3], w_anode939w[3..3]), ( w_anode920w[3..3], w_anode910w[3..3], w_anode900w[3..3], w_anode890w[3..3], w_anode880w[3..3], w_anode870w[3..3], w_anode860w[3..3], w_anode843w[3..3]));
	w_anode1000w[] = ( (w_anode1000w[2..2] & w_data832w[2..2]), (w_anode1000w[1..1] & w_data832w[1..1]), (w_anode1000w[0..0] & (! w_data832w[0..0])), w_anode932w[1..1]);
	w_anode1010w[] = ( (w_anode1010w[2..2] & w_data832w[2..2]), (w_anode1010w[1..1] & w_data832w[1..1]), (w_anode1010w[0..0] & w_data832w[0..0]), w_anode932w[1..1]);
	w_anode834w[] = ( (w_anode834w[0..0] & (! data_wire[3..3])), enable_wire);
	w_anode843w[] = ( (w_anode843w[2..2] & (! w_data832w[2..2])), (w_anode843w[1..1] & (! w_data832w[1..1])), (w_anode843w[0..0] & (! w_data832w[0..0])), w_anode834w[1..1]);
	w_anode860w[] = ( (w_anode860w[2..2] & (! w_data832w[2..2])), (w_anode860w[1..1] & (! w_data832w[1..1])), (w_anode860w[0..0] & w_data832w[0..0]), w_anode834w[1..1]);
	w_anode870w[] = ( (w_anode870w[2..2] & (! w_data832w[2..2])), (w_anode870w[1..1] & w_data832w[1..1]), (w_anode870w[0..0] & (! w_data832w[0..0])), w_anode834w[1..1]);
	w_anode880w[] = ( (w_anode880w[2..2] & (! w_data832w[2..2])), (w_anode880w[1..1] & w_data832w[1..1]), (w_anode880w[0..0] & w_data832w[0..0]), w_anode834w[1..1]);
	w_anode890w[] = ( (w_anode890w[2..2] & w_data832w[2..2]), (w_anode890w[1..1] & (! w_data832w[1..1])), (w_anode890w[0..0] & (! w_data832w[0..0])), w_anode834w[1..1]);
	w_anode900w[] = ( (w_anode900w[2..2] & w_data832w[2..2]), (w_anode900w[1..1] & (! w_data832w[1..1])), (w_anode900w[0..0] & w_data832w[0..0]), w_anode834w[1..1]);
	w_anode910w[] = ( (w_anode910w[2..2] & w_data832w[2..2]), (w_anode910w[1..1] & w_data832w[1..1]), (w_anode910w[0..0] & (! w_data832w[0..0])), w_anode834w[1..1]);
	w_anode920w[] = ( (w_anode920w[2..2] & w_data832w[2..2]), (w_anode920w[1..1] & w_data832w[1..1]), (w_anode920w[0..0] & w_data832w[0..0]), w_anode834w[1..1]);
	w_anode932w[] = ( (w_anode932w[0..0] & data_wire[3..3]), enable_wire);
	w_anode939w[] = ( (w_anode939w[2..2] & (! w_data832w[2..2])), (w_anode939w[1..1] & (! w_data832w[1..1])), (w_anode939w[0..0] & (! w_data832w[0..0])), w_anode932w[1..1]);
	w_anode950w[] = ( (w_anode950w[2..2] & (! w_data832w[2..2])), (w_anode950w[1..1] & (! w_data832w[1..1])), (w_anode950w[0..0] & w_data832w[0..0]), w_anode932w[1..1]);
	w_anode960w[] = ( (w_anode960w[2..2] & (! w_data832w[2..2])), (w_anode960w[1..1] & w_data832w[1..1]), (w_anode960w[0..0] & (! w_data832w[0..0])), w_anode932w[1..1]);
	w_anode970w[] = ( (w_anode970w[2..2] & (! w_data832w[2..2])), (w_anode970w[1..1] & w_data832w[1..1]), (w_anode970w[0..0] & w_data832w[0..0]), w_anode932w[1..1]);
	w_anode980w[] = ( (w_anode980w[2..2] & w_data832w[2..2]), (w_anode980w[1..1] & (! w_data832w[1..1])), (w_anode980w[0..0] & (! w_data832w[0..0])), w_anode932w[1..1]);
	w_anode990w[] = ( (w_anode990w[2..2] & w_data832w[2..2]), (w_anode990w[1..1] & (! w_data832w[1..1])), (w_anode990w[0..0] & w_data832w[0..0]), w_anode932w[1..1]);
	w_data832w[2..0] = data_wire[2..0];
END;
--VALID FILE
